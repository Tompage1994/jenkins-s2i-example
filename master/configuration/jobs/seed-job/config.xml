<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty plugin="build-failure-analyzer@1.19.0">
      <doNotScan>false</doNotScan>
    </com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.27">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <javaposse.jobdsl.plugin.ExecuteDslScripts plugin="job-dsl@1.66">
      <scriptText>#!/usr/bin/env groovy
def jobDeloyList = [&quot;dev&quot;, &quot;test&quot;, &quot;uat&quot;]
def jobBuildList = [&quot;feature&quot;, &quot;dev&quot;, &quot;test&quot;]

def mockJobList = [&quot;mock-cps-backend&quot;, &quot;mock-pps-backend&quot;]
def microserviceJobList = [&quot;cps-microservice&quot;, &quot;pps-microservice&quot;, &quot;notification-microservice&quot;]

def gitUrl = &quot;https://gogs.ci-cd.apps.bp.rht-labs.com/bp/spiral-fe&quot;
def appName = &quot;spiral-fe&quot;
def pipelineNamespace = &quot;ci-cd&quot;
newLine = System.getProperty(&quot;line.separator&quot;)
def pipelineGeneratorVersion = &quot;${JOB_NAME}.${BUILD_ID}&quot;

jobDeloyList.each {
    def jobNameDeploy = it + &quot;-&quot; + appName + &quot;-deploy&quot;
    def jobNameTests =  it + &quot;-&quot; + appName + &quot;-e2e&quot;
    def buildTag = it + &quot;-&quot; + appName + &quot;-build.1234&quot;
    def projectNamespace = &quot;labs-&quot; + it
    def jobDescription = &quot;THIS JOB WAS GENERATED BY THE JENKINS SEED JOB - ${pipelineGeneratorVersion}.  \n&quot; + it + &quot; job for the vue js app\n\n \n\n App available at:: \n\n http://${appName}-${projectNamespace}.apps.bp.rht-labs.com/#/ &quot;

    job(jobNameDeploy) {
        description(jobDescription)
        parameters{
          string{
            name(&quot;BUILD_TAG&quot;)
            defaultValue(&quot;my-app-build.1234&quot;)
            description(&quot;The BUILD_TAG is the \${JOB_NAME}.\${BUILD_NUMBER} of the successful build to be promoted. For example ${buildTag}&quot;)
          }
        }
        logRotator {
          daysToKeep(100)
          artifactNumToKeep(2)
        }
        wrappers {
          ansiColorBuildWrapper {
            colorMapName(&apos;xterm&apos;)
          }
          preScmSteps {
              steps {
                  shell(&apos;git config --global http.sslVerify false&apos;)
              }
              failOnError()
          }
        }
        steps {
          steps {
            shell(&apos;#!/bin/bash&apos; + newLine +
                  &apos;set -o xtrace&apos; + newLine +
                  &apos;PIPELINES_NAMESPACE=&apos; + pipelineNamespace  + newLine +
                  &apos;NAMESPACE=&apos; + projectNamespace  + newLine +
                  &apos;NAME=&apos; + appName  + newLine +
                  &apos;oc tag ${PIPELINES_NAMESPACE}/${NAME}:${BUILD_TAG} ${NAMESPACE}/${NAME}:${BUILD_TAG}&apos; + newLine +
                  &apos;oc project ${NAMESPACE}&apos; + newLine +
                  &apos;oc patch dc ${NAME} -p &quot;spec:&apos; + newLine +
                  &apos;  template:&apos; + newLine +
                  &apos;    spec:&apos; + newLine +
                  &apos;      containers:&apos; + newLine +
                  &apos;        - name: ${NAME}&apos; + newLine +
                  &apos;          image: \&apos;docker-registry.default.svc:5000/${NAMESPACE}/${NAME}:${BUILD_TAG}\&apos;&quot;&apos; + newLine +
                  &apos;oc rollout latest dc/${NAME}&apos;)
          }
          openShiftDeploymentVerifier {
            apiURL(&apos;&apos;)
            depCfg(appName)
            namespace(projectNamespace)
            // This optional field&apos;s value represents the number expected running pods for the deployment for the DeploymentConfig specified.
            replicaCount(&apos;1&apos;)
            authToken(&apos;&apos;)
            verbose(&apos;yes&apos;)
            // This flag is the toggle for turning on or off the verification that the specified replica count for the deployment has been reached.
            verifyReplicaCount(&apos;yes&apos;)
            waitTime(&apos;&apos;)
            waitUnit(&apos;sec&apos;)
          }
        }
        publishers {
          downstreamParameterized {
              trigger(jobNameTests) {
                  condition(&apos;SUCCESS&apos;)
                  parameters {
                      currentBuild()
                  }
              }
          }

          slackNotifier{
            notifyAborted(true)
            notifyBackToNormal(true)
            notifyFailure(true)
            notifyNotBuilt(true)
            notifyRegression(true)
            notifyRepeatedFailure(true)
            notifySuccess(true)
            notifyUnstable(true)
          }
        }

    }

    job(jobNameTests) {
        description(jobDescription)
        label(&apos;npm-build-pod&apos;)
        logRotator {
          daysToKeep(100)
          artifactNumToKeep(2)
        }
        wrappers {
          ansiColorBuildWrapper {
            colorMapName(&apos;xterm&apos;)
          }
          preScmSteps {
              steps {
                  shell(&apos;git config --global http.sslVerify false&apos;)
              }
              failOnError()
          }
        }
        scm {
          git {
            remote {
              name(&apos;origin&apos;)
              url(gitUrl)
              branch(&apos;&apos;)
              credentials(&apos;jenkins-idm&apos;)
            }
          }
        }
        steps {
          steps {
            shell(&apos;#!/bin/bash&apos; + newLine +
                  &apos;set -o xtrace&apos; + newLine +
                  &apos;echo run e2e tests&apos; + newLine +
                  &apos;scl enable rh-nodejs6 \&apos;npm install\&apos;&apos; + newLine +
                  &apos;scl enable rh-nodejs6 \&apos;npm run e2e\&apos;&apos;)
          }
        }
        publishers {
          xUnitPublisher {
            tools {
              jUnitType {
                pattern(&apos;reports/e2e/*.xml&apos;)
                skipNoTestFiles(false)
                failIfNotNew(true)
                deleteOutputFiles(true)
                stopProcessingIfError(true)
              }
            }
            thresholdMode(0)
            testTimeMargin(&apos;3000&apos;)
          }
          slackNotifier{
            notifyAborted(true)
            notifyBackToNormal(true)
            notifyFailure(true)
            notifyNotBuilt(true)
            notifyRegression(true)
            notifyRepeatedFailure(true)
            notifySuccess(true)
            notifyUnstable(true)
          }
        }
    }
}



jobBuildList.each {
  def jobName = it + &quot;-&quot; + appName + &quot;-build&quot;
  def jobPrefix = it
  def jobDescription = &quot;THIS JOB WAS GENERATED BY THE JENKINS SEED JOB - ${pipelineGeneratorVersion}.  \n&quot;  + it + &quot;build job for the vue js app &quot;

  job(jobName) {
      description(jobDescription)
  	  label(&apos;npm-build-pod&apos;)
      logRotator {
        daysToKeep(100)
        artifactNumToKeep(2)
      }
      wrappers {
        ansiColorBuildWrapper {
          colorMapName(&apos;xterm&apos;)
        }
        preScmSteps {
          // Fails the build when one of the steps fails.
          failOnError(true)
          // Adds build steps to be run before SCM checkout.
          steps {
            shell(&apos;git config --global http.sslVerify false&apos;)
          }
        }
      }
      scm {
        git {
          remote {
            name(&apos;origin&apos;)
            url(gitUrl)
            credentials(&apos;jenkins-idm&apos;)
          }
          if (jobName.contains(&apos;dev&apos;)){
            branch(&apos;develop&apos;)
          }
          else if (jobName.contains(&apos;test&apos;)){
            branch(&apos;master&apos;)
          }
          else {
            branch(&apos;*/feature/**&apos;)
          }
        }
      }
      triggers {
        cron(&apos;H/60 H/2 * * *&apos;)
      }
      steps {
        steps {
          shell(&apos;#!/bin/bash&apos; + newLine +
                &apos;NAME=&apos; + appName  + newLine +
                &apos;set -o xtrace&apos; + newLine +
                &apos;scl enable rh-nodejs6 \&apos;npm install\&apos;&apos; + newLine +
                &apos;scl enable rh-nodejs6 \&apos;npm run unit\&apos;&apos; + newLine +
                &apos;scl enable rh-nodejs6 \&apos;npm run build\&apos;&apos; + newLine +
                &apos;mkdir package-contents&apos; + newLine +
                &apos;mv dist Dockerfile package-contents&apos; + newLine +
                &apos;oc patch bc ${NAME} -p &quot;spec:&apos; + newLine +
                &apos;   nodeSelector:&apos; + newLine +
                &apos;   output:&apos; + newLine +
                &apos;     to:&apos; + newLine +
                &apos;       kind: ImageStreamTag&apos; + newLine +
                &apos;       name: \&apos;${NAME}:${JOB_NAME}.${BUILD_NUMBER}\&apos;&quot;&apos; + newLine +
                &apos;oc start-build ${NAME} --from-dir=package-contents/ --follow&apos;)
        }
      }
      publishers {
        archiveArtifacts(&apos;**&apos;)
      	cobertura(&apos;reports/coverage/cobertura.xml&apos;) {
          failNoReports(true)
          sourceEncoding(&apos;ASCII&apos;)
          // the following targets are added by default to check the method, line and conditional level coverage
          methodTarget(80, 40, 20)
          lineTarget(80, 40, 20)
          conditionalTarget(70, 40, 20)
        }
        publishHtml {
          report(&apos;reports/coverage/lcov-report&apos;) {
            reportName(&apos;HTML Code Coverage Report&apos;)
            allowMissing(false)
          	alwaysLinkToLastBuild(false)
          }
        }
        xUnitPublisher {
          tools {
          	jUnitType {
              pattern(&apos;reports/**/unit-report.xml&apos;)
              skipNoTestFiles(false)
              failIfNotNew(true)
              deleteOutputFiles(true)
              stopProcessingIfError(true)
            }
          }
          
          thresholds {
            failedThreshold {
              failureThreshold(&apos;0&apos;)
              unstableThreshold(&apos;&apos;)
              unstableNewThreshold(&apos;&apos;)
              failureNewThreshold(&apos;&apos;)
            }
          }
          
          thresholdMode(0)
          testTimeMargin(&apos;3000&apos;)
        }

        // println &quot;INFO - blah ${jobName}&quot;
        if (jobName.contains(&apos;dev&apos;) || jobName.contains(&apos;test&apos;)) {
          println &quot;INFO - downstream param stuff for ${jobPrefix}&quot;
          downstreamParameterized {
              trigger(jobPrefix + &quot;-&quot; + appName + &quot;-deploy&quot;) {
                  condition(&apos;UNSTABLE_OR_BETTER&apos;)
                  parameters {
                      predefinedBuildParameters{
                        properties(&quot;BUILD_TAG=\${JOB_NAME}.\${BUILD_NUMBER}&quot;)
                        textParamValueOnNewLine(true)
                      }
                  }
              }
          }
        }
        slackNotifier{
            notifyAborted(true)
            notifyBackToNormal(true)
            notifyFailure(true)
            notifyNotBuilt(true)
            notifyRegression(true)
            notifyRepeatedFailure(true)
            notifySuccess(true)
            notifyUnstable(true)
          }
      }
  }

  buildPipelineView(jobPrefix + &quot;-pipeline&quot;) {
      filterBuildQueue()
      filterExecutors()
      title(jobPrefix + &quot; CI Pipeline&quot;)
      displayedBuilds(5)
      selectedJob(jobName)
      alwaysAllowManualTrigger()
      refreshFrequency(60)
  }
}

mockJobList.each {
  def jobName = it + &quot;-build&quot;
  def jobNameDeploy = it + &quot;-deploy&quot;
  def jobSuffix = it
  def projectNamespace = &quot;labs-&quot; + &quot;dev&quot;
  def jobDescription = &quot;THIS JOB WAS GENERATED BY THE JENKINS SEED JOB - ${pipelineGeneratorVersion}.  \n&quot;  + it + &quot;build job for the mocks app &quot;

  job(jobName) {
    description(jobDescription)
    label(&apos;npm-build-pod&apos;)
    logRotator {
      daysToKeep(100)
      artifactNumToKeep(2)
    }
    wrappers {
      ansiColorBuildWrapper {
        colorMapName(&apos;xterm&apos;)
      }
      preScmSteps {
        // Fails the build when one of the steps fails.
        failOnError(true)
        // Adds build steps to be run before SCM checkout.
        steps {
          shell(&apos;git config --global http.sslVerify false&apos;)
        }
      }
    }
    scm {
      git {
        remote {
          name(&apos;origin&apos;)
          url(&quot;https://gogs.ci-cd.apps.bp.rht-labs.com/bp/&quot; + jobSuffix)
          credentials(&apos;jenkins-idm&apos;)
        }
        branch(&apos;master&apos;)
      }
    }
    triggers {
      cron(&apos;H/60 H/2 * * *&apos;)
    }
    steps {
      steps {
        shell(&apos;#!/bin/bash&apos; + newLine +
          &apos;NAME=&apos; + jobSuffix  + newLine +
          &apos;set -o xtrace&apos; + newLine +
          &apos;echo &quot;Dirty Hack cuz Im lazy - DS&quot;&apos; + newLine +
          &apos;mkdir package-contents&apos; + newLine +
          &apos;mv Dockerfile data wsdl package.json index.js package-contents&apos; + newLine +
          &apos;oc patch bc ${NAME} -p &quot;spec:&apos; + newLine +
          &apos;   nodeSelector:&apos; + newLine +
          &apos;   output:&apos; + newLine +
          &apos;     to:&apos; + newLine +
          &apos;       kind: ImageStreamTag&apos; + newLine +
          &apos;       name: \&apos;${NAME}:${JOB_NAME}.${BUILD_NUMBER}\&apos;&quot;&apos; + newLine +
          &apos;oc start-build ${NAME} --from-dir=package-contents/ --follow&apos;)
      }
    }
    publishers {
      println &quot;INFO - downstream param stuff for ${jobSuffix}&quot;
      downstreamParameterized {
        trigger(jobNameDeploy) {
          condition(&apos;SUCCESS&apos;)
          parameters {
            predefinedBuildParameters{
              properties(&quot;BUILD_TAG=\${JOB_NAME}.\${BUILD_NUMBER}&quot;)
              textParamValueOnNewLine(true)
            }
          }
        }
      }
      slackNotifier{
        notifyAborted(true)
        notifyBackToNormal(true)
        notifyFailure(true)
        notifyNotBuilt(true)
        notifyRegression(true)
        notifyRepeatedFailure(true)
        notifySuccess(true)
        notifyUnstable(true)
      }
    }
  }

  job(jobNameDeploy) {
    description(jobDescription)
    parameters{
      string{
        name(&quot;BUILD_TAG&quot;)
        defaultValue(&quot;my-app-build.1234&quot;)
        description(&quot;The BUILD_TAG is the \${JOB_NAME}.\${BUILD_NUMBER} of the successful build to be promoted.&quot;)
      }
    }
    logRotator {
      daysToKeep(100)
      artifactNumToKeep(2)
    }
    wrappers {
      ansiColorBuildWrapper {
        colorMapName(&apos;xterm&apos;)
      }
    }
    steps {
      steps {
        shell(&apos;#!/bin/bash&apos; + newLine +
          &apos;set -o xtrace&apos; + newLine +
          &apos;PIPELINES_NAMESPACE=&apos; + pipelineNamespace  + newLine +
          &apos;NAMESPACE=&apos; + projectNamespace  + newLine +
          &apos;NAME=&apos; + jobSuffix + newLine +
          &apos;oc tag ${PIPELINES_NAMESPACE}/${NAME}:${BUILD_TAG} ${NAMESPACE}/${NAME}:${BUILD_TAG}&apos; + newLine +
          &apos;oc project ${NAMESPACE}&apos; + newLine +
          &apos;oc patch dc ${NAME} -p &quot;spec:&apos; + newLine +
          &apos;  template:&apos; + newLine +
          &apos;    spec:&apos; + newLine +
          &apos;      containers:&apos; + newLine +
          &apos;        - name: ${NAME}&apos; + newLine +
          &apos;          image: \&apos;docker-registry.default.svc:5000/${NAMESPACE}/${NAME}:${BUILD_TAG}\&apos;&quot;&apos; + newLine +
          &apos;oc rollout latest dc/${NAME}&apos;)
      }
      openShiftDeploymentVerifier {
        apiURL(&apos;&apos;)
        depCfg(appName)
        namespace(projectNamespace)
        // This optional field&apos;s value represents the number expected running pods for the deployment for the DeploymentConfig specified.
        replicaCount(&apos;1&apos;)
        authToken(&apos;&apos;)
        verbose(&apos;yes&apos;)
        // This flag is the toggle for turning on or off the verification that the specified replica count for the deployment has been reached.
        verifyReplicaCount(&apos;yes&apos;)
        waitTime(&apos;&apos;)
        waitUnit(&apos;sec&apos;)
      }
    }
    publishers {
      slackNotifier{
        notifyAborted(true)
        notifyBackToNormal(true)
        notifyFailure(true)
        notifyNotBuilt(true)
        notifyRegression(true)
        notifyRepeatedFailure(true)
        notifySuccess(true)
        notifyUnstable(true)
      }
    }
  }

}

// NOTE - this pipeline is simple as the microservices are. Think we should keep it this way as
// the spiral-fe pipeline is too complex for out use / team size
microserviceJobList.each {
  def jobName = it + &quot;-dev-build&quot;
  def jobNameDeployTest = it + &quot;-deploy-test&quot;
  def jobNameDeployProd = it + &quot;-deploy-prod&quot;
  def jobPrefix = it
  def projectDevNamespace = &quot;labs-dev&quot;
  def projectTestNamespace = &quot;labs-test&quot;
  def jobDescription = &quot;THIS JOB WAS GENERATED BY THE JENKINS SEED JOB - ${pipelineGeneratorVersion}.  \n&quot;  + it + &quot;build job for the microservice apps&quot;

  job(jobName) {
    description(jobDescription)
    label(&apos;npm-build-pod&apos;)
    logRotator {
      daysToKeep(100)
      artifactNumToKeep(2)
    }
    wrappers {
      ansiColorBuildWrapper {
        colorMapName(&apos;xterm&apos;)
      }
      preScmSteps {
        // Fails the build when one of the steps fails.
        failOnError(true)
        // Adds build steps to be run before SCM checkout.
        steps {
          shell(&apos;git config --global http.sslVerify false&apos;)
        }
      }
    }
    scm {
      git {
        remote {
          name(&apos;origin&apos;)
          url(&quot;https://gogs.ci-cd.apps.bp.rht-labs.com/bp/&quot; + jobPrefix)
          credentials(&apos;jenkins-idm&apos;)
        }
        branch(&apos;master&apos;)
      }
    }
    triggers {
      cron(&apos;H/60 H/2 * * *&apos;)
    }
    steps {
      steps {
        shell(&apos;#!/bin/bash&apos; + newLine +
          &apos;NAME=&apos; + jobPrefix  + newLine +
          &apos;export NODE_ENV=ci&apos; + newLine +
          &apos;set -o xtrace&apos; + newLine +
          &apos;scl enable rh-nodejs6 \&apos;npm install\&apos;&apos; + newLine +
          &apos;scl enable rh-nodejs6 \&apos;./node_modules/.bin/gulp lint\&apos;&apos; + newLine +
          &apos;scl enable rh-nodejs6 \&apos;./node_modules/.bin/gulp test\&apos;&apos; + newLine +
          &apos;mkdir package-contents&apos; + newLine +
          &apos;mv server Dockerfile package.json server.js package-contents&apos; + newLine +
          &apos;oc patch bc ${NAME} -p &quot;spec:&apos; + newLine +
          &apos;   nodeSelector:&apos; + newLine +
          &apos;   output:&apos; + newLine +
          &apos;     to:&apos; + newLine +
          &apos;       kind: ImageStreamTag&apos; + newLine +
          &apos;       name: \&apos;${NAME}:${JOB_NAME}.${BUILD_NUMBER}\&apos;&quot;&apos; + newLine +
          &apos;oc start-build ${NAME} --from-dir=package-contents/ --follow&apos;)
      }
    }
    publishers {
      archiveArtifacts(&apos;**&apos;)
      publishHtml {
        report(&apos;coverage/lcov-report&apos;) {
          reportName(&apos;HTML Code Coverage Report&apos;)
          allowMissing(false)
          alwaysLinkToLastBuild(false)
        }
      }
      xUnitPublisher {
        tools {
          jUnitType {
            pattern(&apos;xunit.xml&apos;)
            skipNoTestFiles(false)
            failIfNotNew(true)
            deleteOutputFiles(true)
            stopProcessingIfError(true)
          }
        }
        thresholdMode(0)
        testTimeMargin(&apos;3000&apos;)
      }

      downstreamParameterized {
        trigger(jobNameDeployTest) {
          condition(&apos;SUCCESS&apos;)
          parameters {
            predefinedBuildParameters{
              properties(&quot;BUILD_TAG=\${JOB_NAME}.\${BUILD_NUMBER}&quot;)
              textParamValueOnNewLine(true)
            }
          }
        }
      }
      slackNotifier{
        notifyAborted(true)
        notifyBackToNormal(true)
        notifyFailure(true)
        notifyNotBuilt(true)
        notifyRegression(true)
        notifyRepeatedFailure(true)
        notifySuccess(true)
        notifyUnstable(true)
      }
    }
  }

  job(jobNameDeployTest) {
    description(jobDescription)
    parameters{
      string{
        name(&quot;BUILD_TAG&quot;)
        defaultValue(&quot;my-app-build.1234&quot;)
        description(&quot;The BUILD_TAG is the \${JOB_NAME}.\${BUILD_NUMBER} of the successful build to be promoted.&quot;)
      }
    }
    logRotator {
      daysToKeep(100)
      artifactNumToKeep(2)
    }
    wrappers {
      ansiColorBuildWrapper {
        colorMapName(&apos;xterm&apos;)
      }
    }
    steps {
      steps {
        shell(&apos;#!/bin/bash&apos; + newLine +
          &apos;set -o xtrace&apos; + newLine +
          &apos;PIPELINES_NAMESPACE=&apos; + pipelineNamespace  + newLine +
          &apos;NAMESPACE=&apos; + projectDevNamespace  + newLine +
          &apos;NAME=&apos; + jobPrefix  + newLine +
          &apos;oc tag ${PIPELINES_NAMESPACE}/${NAME}:${BUILD_TAG} ${NAMESPACE}/${NAME}:${BUILD_TAG}&apos; + newLine +
          &apos;oc project ${NAMESPACE}&apos; + newLine +
          &apos;oc patch dc ${NAME} -p &quot;spec:&apos; + newLine +
          &apos;  template:&apos; + newLine +
          &apos;    spec:&apos; + newLine +
          &apos;      containers:&apos; + newLine +
          &apos;        - name: ${NAME}&apos; + newLine +
          &apos;          image: \&apos;docker-registry.default.svc:5000/${NAMESPACE}/${NAME}:${BUILD_TAG}\&apos;&apos; + newLine +
          &apos;          env:&apos; + newLine +
          &apos;            - name: NODE_ENV&apos; + newLine +
          &apos;              value: \&apos;test\&apos;&quot;&apos; + newLine +
          &apos;oc rollout latest dc/${NAME}&apos;)
      }
      openShiftDeploymentVerifier {
        apiURL(&apos;&apos;)
        depCfg(jobPrefix)
        namespace(projectDevNamespace)
        // This optional field&apos;s value represents the number expected running pods for the deployment for the DeploymentConfig specified.
        replicaCount(&apos;1&apos;)
        authToken(&apos;&apos;)
        verbose(&apos;yes&apos;)
        // This flag is the toggle for turning on or off the verification that the specified replica count for the deployment has been reached.
        verifyReplicaCount(&apos;yes&apos;)
        waitTime(&apos;&apos;)
        waitUnit(&apos;sec&apos;)
      }
    }
    publishers {
      slackNotifier{
        notifyAborted(true)
        notifyBackToNormal(true)
        notifyFailure(true)
        notifyNotBuilt(true)
        notifyRegression(true)
        notifyRepeatedFailure(true)
        notifySuccess(true)
        notifyUnstable(true)
      }
    }

  }

  job(jobNameDeployProd) {
    description(jobDescription)
    parameters{
      string{
        name(&quot;BUILD_TAG&quot;)
        defaultValue(&quot;my-app-build.1234&quot;)
        description(&quot;The BUILD_TAG is the \${JOB_NAME}.\${BUILD_NUMBER} of the successful build to be promoted.&quot;)
      }
    }
    logRotator {
      daysToKeep(100)
      artifactNumToKeep(2)
    }
    wrappers {
      ansiColorBuildWrapper {
        colorMapName(&apos;xterm&apos;)
      }
    }
    steps {
      steps {
        shell(&apos;#!/bin/bash&apos; + newLine +
          &apos;set -o xtrace&apos; + newLine +
          &apos;PIPELINES_NAMESPACE=&apos; + pipelineNamespace  + newLine +
          &apos;NAMESPACE=&apos; + projectTestNamespace  + newLine +
          &apos;NAME=&apos; + jobPrefix  + newLine +
          &apos;oc tag ${PIPELINES_NAMESPACE}/${NAME}:${BUILD_TAG} ${NAMESPACE}/${NAME}:${BUILD_TAG}&apos; + newLine +
          &apos;oc project ${NAMESPACE}&apos; + newLine +
          &apos;oc patch dc ${NAME} -p &quot;spec:&apos; + newLine +
          &apos;  template:&apos; + newLine +
          &apos;    spec:&apos; + newLine +
          &apos;      containers:&apos; + newLine +
          &apos;        - name: ${NAME}&apos; + newLine +
          &apos;          image: \&apos;docker-registry.default.svc:5000/${NAMESPACE}/${NAME}:${BUILD_TAG}\&apos;&apos; + newLine +
          &apos;          env:&apos; + newLine +
          &apos;            - name: NODE_ENV&apos; + newLine +
          &apos;              value: \&apos;production\&apos;&quot;&apos; + newLine +
          &apos;oc rollout latest dc/${NAME}&apos;)
      }
      openShiftDeploymentVerifier {
        apiURL(&apos;&apos;)
        depCfg(jobPrefix)
        namespace(projectTestNamespace)
        // This optional field&apos;s value represents the number expected running pods for the deployment for the DeploymentConfig specified.
        replicaCount(&apos;1&apos;)
        authToken(&apos;&apos;)
        verbose(&apos;yes&apos;)
        // This flag is the toggle for turning on or off the verification that the specified replica count for the deployment has been reached.
        verifyReplicaCount(&apos;yes&apos;)
        waitTime(&apos;&apos;)
        waitUnit(&apos;sec&apos;)
      }
    }
    publishers {
      slackNotifier{
        notifyAborted(true)
        notifyBackToNormal(true)
        notifyFailure(true)
        notifyNotBuilt(true)
        notifyRegression(true)
        notifyRepeatedFailure(true)
        notifySuccess(true)
        notifyUnstable(true)
      }
    }
  }
}



buildMonitorView(&apos;spiral-fe-monitor&apos;) {
    description(&apos;All build jobs for the vue app&apos;)
    filterBuildQueue()
    filterExecutors()
    jobs {
        name(&apos;feature-spiral-fe-build&apos;)
      	name(&apos;dev-spiral-fe-build&apos;)
        name(&apos;test-spiral-fe-build&apos;)
      	name(&apos;dev-spiral-fe-deploy&apos;)
        name(&apos;test-spiral-fe-deploy&apos;)
      	name(&apos;uat-spiral-fe-deploy&apos;)
        name(&apos;dev-spiral-fe-e2e&apos;)
      	name(&apos;test-spiral-fe-e2e&apos;)
        name(&apos;uat-spiral-fe-e2e&apos;)      
    }
}

buildMonitorView(&apos;microservice-monitor&apos;) {
  description(&apos;All build jobs for the vue app&apos;)
  filterBuildQueue()
  filterExecutors()
  jobs {
    regex(&quot;.*microservice.*&quot;)
  }
}</scriptText>
      <usingScriptText>true</usingScriptText>
      <sandbox>false</sandbox>
      <ignoreExisting>false</ignoreExisting>
      <ignoreMissingFiles>false</ignoreMissingFiles>
      <failOnMissingPlugin>true</failOnMissingPlugin>
      <unstableOnDeprecation>false</unstableOnDeprecation>
      <removedJobAction>DELETE</removedJobAction>
      <removedViewAction>DELETE</removedViewAction>
      <removedConfigFilesAction>DELETE</removedConfigFilesAction>
      <lookupStrategy>JENKINS_ROOT</lookupStrategy>
    </javaposse.jobdsl.plugin.ExecuteDslScripts>
  </builders>
  <publishers>
    <jenkins.plugins.slack.SlackNotifier plugin="slack@2.3">
      <baseUrl></baseUrl>
      <teamDomain></teamDomain>
      <authToken></authToken>
      <authTokenCredentialId></authTokenCredentialId>
      <botUser>false</botUser>
      <room></room>
      <startNotification>false</startNotification>
      <notifySuccess>true</notifySuccess>
      <notifyAborted>true</notifyAborted>
      <notifyNotBuilt>true</notifyNotBuilt>
      <notifyUnstable>true</notifyUnstable>
      <notifyRegression>true</notifyRegression>
      <notifyFailure>true</notifyFailure>
      <notifyBackToNormal>true</notifyBackToNormal>
      <notifyRepeatedFailure>false</notifyRepeatedFailure>
      <includeTestSummary>false</includeTestSummary>
      <includeFailedTests>false</includeFailedTests>
      <commitInfoChoice>NONE</commitInfoChoice>
      <includeCustomMessage>false</includeCustomMessage>
      <customMessage></customMessage>
    </jenkins.plugins.slack.SlackNotifier>
  </publishers>
  <buildWrappers>
    <hudson.plugins.ansicolor.AnsiColorBuildWrapper plugin="ansicolor@0.5.2">
      <colorMapName>gnome-terminal</colorMapName>
    </hudson.plugins.ansicolor.AnsiColorBuildWrapper>
  </buildWrappers>
</project>